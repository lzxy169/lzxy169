<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[C/C++内存管理]]></title>
    <url>%2F2018%2F04%2F13%2Fc%3Ac%2B%2B-memory-management%2F</url>
    <content type="text"><![CDATA[内存分配 在C++中，内存分成5个区，他们分别是堆、栈、自由存储区、全局/静态存储区和常量存储区。 栈：在执行函数时，函数内局部变量的存储单元都可以在栈上创建，函数执行结束时这些存储单元自动被释放。栈内存分配运算内置于处理器的指令集中，效率很高，但是分配的内存容量有限。 堆：就是那些由new分配的内存块，它们的释放编译器不去管，由应用程序去控制，一般一个new就要对应一个delete。如果没有手动释放掉，那么在程序结束后，操作系统会自动回收。 自由存储区：就是那些由malloc等分配的内存块，它和堆是十分相似的，不过它是用free来结束自己的生命的。 全局静态存储区：全局变量和静态变量被分配到同一块内存中，在以前的C语言中，全局变量又分为初始化的和未初始化的，在C++里面没有这个区分了，他们共同占用同一块内存区。 常量存储区：这是一块比较特殊的存储区，他们里面存放的是常量，不允许修改。 明确区分堆与栈 举个例子：1234void foo() &#123; int* p = new int[5]; delete []p;&#125; 这条短短的一句话就包含了堆与栈，看到new，我们首先就应该想到，我们分配了一块堆内存，那么指针p呢？他分配的是一块栈内存。 所以这行代码的意思就是：在栈内存中存放了一个指向一块堆内存的指针p。在程序会先确定在堆中分配内存的大小，然后调用operator new分配内存，然后返回这块内存的首地址，放入栈中。delete []p，这是为了告诉编译器：我删除的是一个数组，编译器就会根据相应的Cookie信息去进行释放内存的工作。 堆和栈的区别 管理方式：对于栈来讲，是由编译器自动管理，无需我们手工控制；对于堆来说，释放工作由程序员控制，容易产生memory leak。 空间大小：一般来讲在32位系统下，堆内存可以达到4G的空间，从这个角度来看堆内存几乎是没有什么限制的。但是对于栈来讲，一般都是有一定的空间大小的，一般系统默认设置栈段为8M、4M、2M或1M。 碎片问题：对于堆来讲，频繁的new/delete势必会造成内存空间的不连续，从而造成大量的碎片，使程序效率降低。对于栈来讲，则不会存在这个问题，因为栈是先进后出的队列，他们是如此的一一对应，以至于永远都不可能有一个内存块从栈中间弹出，在他弹出之前，在他上面的后进的栈内容已经被弹出，详细的可以参考数据结构，这里我们就不再一一讨论了。 生长方向：对于堆来讲，生长方向是向上的，也就是向着内存地址增加的方向；对于栈来讲，它的生长方向是向下的，是向着内存地址减小的方向增长。 分配方式：堆都是动态分配的，没有静态分配的堆。栈有2种分配方式：静态分配和动态分配。静态分配是编译器完成的，比如局部变量的分配。动态分配由alloc函数进行分配，但是栈的动态分配和堆是不同的，他的动态分配是由编译器进行释放，无需我们手工实现。 分配效率：栈是系统提供的数据结构，计算机会在底层对栈提供支持：分配专门的寄存器存放栈的地址，压栈出栈都有专门的指令执行，这就决定了栈的效率比较高。堆则是C/C++函数库提供的，它的机制是很复杂的，例如为了分配一块内存，库函数会按照一定的算法（具体的算法可以参考数据结构/操作系统）在堆内存中搜索可用的足够大小的空间，如果没有足够大小的空间（可能是由于内存碎片太多），就有可能调用系统功能去增加程序数据段的内存空间，这样就有机会分到足够大小的内存，然后进行返回。显然，堆的效率比栈要低得多。 从这里我们可以看到，堆和栈相比，由于大量new/delete的使用，容易造成大量的内存碎片；由于没有专门的系统支持，效率很低；由于可能引发用户态和核心态的切换，内存的申请，代价变得更加昂贵。所以栈在程序中是应用最广泛的，就算是函数的调用也利用栈去完成，函数调用过程中的参数，返回地址，EBP和局部变量都采用栈的方式存放。所以，我们推荐大家尽量用栈，而不是用堆。 虽然栈有如此众多的好处，但是由于和堆相比不是那么灵活，有时候分配大量的内存空间，还是用堆好一些。 无论是堆还是栈，都要防止越界现象的发生（除非你是故意使其越界），因为越界的结果要么是程序崩溃，要么是摧毁程序的堆、栈结构，产生以想不到的结果,就算是在你的程序运行过程中，没有发生上面的问题，你还是要小心，说不定什么时候就崩掉，那时候debug可是相当困难的：） 控制C++的内存分配 在嵌入式系统中使用C++的一个常见问题是内存分配，即对new 和 delete 操作符的失控。 具有讽刺意味的是，问题的根源却是C++对内存的管理非常的容易而且安全。具体地说，当一个对象被消除时，它的析构函数能够安全的释放所分配的内存。 这当然是个好事情，但是这种使用的简单性使得程序员们过度使用new 和 delete，而不注意在嵌入式C++环境中的因果关系。并且，在嵌入式系统中，由于内存的限制，频繁的动态分配不定大小的内存会引起很大的问题以及堆破碎的风险。 作为忠告，保守的使用内存分配是嵌入式环境中的第一原则。 但当你必须要使用new和delete时，你不得不控制C++中的内存分配。你需要用一个全局的new 和delete来代替系统的内存分配符，并且一个类一个类的重载new和delete。 一个防止堆破碎的通用方法是从不同固定大小的内存池中分配不同类型的对象。对每个类重载new 和delete就提供了这样的控制。 重载全局的new和delete操作符 可以很容易地重载new 和 delete 操作符，如下所示:1234567void *operator new(size_t size) &#123; void *p = malloc(size); return (p);&#125;void operator delete(void *p) &#123; free(p);&#125; 这段代码可以代替默认的操作符来满足内存分配的请求。出于解释C++的目的，我们也可以直接调用malloc() 和free()。 也可以对单个类的new 和 delete操作符重载。这是你能灵活的控制对象的内存分配。12345678910111213class TestClass &#123; public: void *operator new(size_t size); void operator delete(void *p); // .. other members here ...&#125;;void *TestClass::operator new(size_t size)&#123; void *p = malloc(size); // Replace this with alternative allocator return (p);&#125;void TestClass::operator delete(void *p)&#123; free(p); // Replace this with alternative de-allocator&#125; 所有TestClass 对象的内存分配都采用这段代码。更进一步，任何从TestClass 继承的类也都采用这一方式，除非它自己也重载了new 和 delete 操作符。通过重载new 和 delete 操作符的方法，你可以自由地采用不同的分配策略，从不同的内存池中分配不同的类对象。 为单个的类重载new[]和delete[] 必须小心对象数组的分配。你可能希望调用到被你重载过的new 和 delete 操作符，但并不如此。内存的请求被定向到全局的new[]和delete[] 操作符，而这些内存来自于系统堆。 C++将对象数组的内存分配作为一个单独的操作，而不同于单个对象的内存分配。为了改变这种方式，你同样需要重载new[] 和 delete[]操作符。123456789101112131415161718class TestClass &#123; public: void *operator new[ ](size_t size); void operator delete[ ](void *p); // .. other members here ..&#125;;void *TestClass::operator new[ ](size_t size)&#123; void *p = malloc(size); return (p);&#125;void TestClass::operator delete[ ](void *p)&#123; free(p);&#125;int main(void)&#123; TestClass *p = new TestClass[10]; // ... etc ... delete[ ] p;&#125; 但是注意：对于多数C++的实现，new[]操作符中的个数参数是数组的大小加上额外的存储对象数目的一些字节。在你的内存分配机制重要考虑的这一点。你应该尽量避免分配对象数组，从而使你的内存分配策略简单。 常见的内存错误及其对策 发生内存错误是件非常麻烦的事情。编译器不能自动发现这些错误，通常是在程序运行时才能捕捉到。而这些错误大多没有明显的症状，时隐时现，增加了改错的难度。 常见的内存错误及其对策如下： 内存分配未成功，却使用了它。编程新手常犯这种错误，因为他们没有意识到内存分配会不成功。常用解决办法是，在使用内存之前检查指针是否为NULL。如果指针p是函数的参数，那么在函数的入口处用assert(p!=NULL)进行检查。如果是用malloc或new来申请内存，应该用if(p==NULL) 或if(p!=NULL)进行防错处理。 内存分配虽然成功，但是尚未初始化就引用它。犯这种错误主要有两个起因：一是没有初始化的观念；二是误以为内存的缺省初值全为零，导致引用初值错误（例如数组）。内存的缺省初值究竟是什么并没有统一的标准，尽管有些时候为零值，我们宁可信其无不可信其有。所以无论用何种方式创建数组，都别忘了赋初值，即便是赋零值也不可省略，不要嫌麻烦。 内存分配成功并且已经初始化，但操作越过了内存的边界。例如在使用数组时经常发生下标“多1”或者“少1”的操作。特别是在for循环语句中，循环次数很容易搞错，导致数组操作越界。 忘记了释放内存，造成内存泄露。含有这种错误的函数每被调用一次就丢失一块内存。刚开始时系统的内存充足，你看不到错误。终有一次程序突然死掉，系统出现提示：内存耗尽。动态内存的申请与释放必须配对，程序中malloc与free的使用次数一定要相同，否则肯定有错误（new/delete同理）。 释放了内存却继续使用它。 有三种情况：(1). 程序中的对象调用关系过于复杂，实在难以搞清楚某个对象究竟是否已经释放了内存，此时应该重新设计数据结构，从根本上解决对象管理的混乱局面。(2). 函数的return语句写错了，注意不要返回指向“栈内存”的“指针”或者“引用”，因为该内存在函数体结束时被自动销毁。(3). 使用free或delete释放了内存后，没有将指针设置为NULL。导致产生“野指针”。 那么如何避免产生野指针呢？这里列出了5条规则，平常写程序时多注意一下，养成良好的习惯。 规则1：用malloc或new申请内存之后，应该立即检查指针值是否为NULL。防止使用指针值为NULL的内存。 规则2：不要忘记为数组和动态内存赋初值。防止将未被初始化的内存作为右值使用。 规则3：避免数组或指针的下标越界，特别要当心发生“多1”或者“少1”操作。 规则4：动态内存的申请与释放必须配对，防止内存泄漏。 规则5：用free或delete释放了内存之后，立即将指针设置为NULL，防止产生“野指针”。 指针与数组的对比 C++/C程序中，指针和数组在不少地方可以相互替换着用，让人产生一种错觉，以为两者是等价的。 数组：要么在静态存储区被创建（如全局数组），要么在栈上被创建。数组名对应着（而不是指向）一块内存，其地址与容量在生命期内保持不变，只有数组的内容可以改变。 指针：可以随时指向任意类型的内存块，它的特征是“可变”，所以我们常用指针来操作动态内存。指针远比数组灵活，但也更危险。 下面以字符串为例比较指针与数组的特性。 修改内容 下面示例中，字符数组a的容量是6个字符，其内容为 hello。a的内容可以改变，如a[0]= ‘X’。指针p指向常量字符串“world”（位于静态存储区，内容为world），常量字符串的内容是不可以被修改的。从语法上看，编译器并不觉得语句p[0]= ‘X’有什么不妥，但是该语句企图修改常量字符串的内容而导致运行错误。 123456char a[] = “hello”;a[0] = ‘X’;cout &lt;&lt; a &lt;&lt; endl;char *p = “world”; // 注意p指向常量字符串p[0] = ‘X’; // 编译器不能发现该错误cout &lt;&lt; p &lt;&lt; endl; 内容复制与比较 不能对数组名进行直接复制与比较。若想把数组a的内容复制给数组b，不能用语句 b = a ，否则将产生编译错误。应该用标准库函数strcpy进行复制。同理，比较b和a的内容是否相同，不能用if(b==a) 来判断，应该用标准库函数strcmp进行比较。 语句 p = a 并不能把a的内容复制给指针p，而是把a的地址赋给了p。要想复制a的内容，可以先用库函数malloc为p申请一块容量为strlen(a)+1个字符的内存，再用strcpy进行字符串复制。同理，语句if(p==a) 比较的不是内容而是地址，应该用库函数strcmp来比较。 123456789101112// 数组…char a[] = "hello";char b[10];strcpy(b, a); // 不能用 b = a;if(strcmp(b, a) == 0) // 不能用 if (b == a)…// 指针…int len = strlen(a);char *p = (char *)malloc(sizeof(char)*(len+1));strcpy(p,a); // 不要用 p = a;if(strcmp(p, a) == 0) // 不要用 if (p == a)… 计算内存容量 用运算符sizeof可以计算出数组的容量（字节数）。如下示例中，sizeof(a)的值是12。指针p指向a，但是sizeof(p)的值却是4。这是因为sizeof(p)得到的是一个指针变量的字节数，相当于sizeof(char*)，而不是p所指的内存容量。C++/C语言没有办法知道指针所指的内存容量，除非在申请内存时记住它。 1234char a[] = "hello world";char *p = a;cout&lt;&lt; sizeof(a) &lt;&lt; endl; // 12字节cout&lt;&lt; sizeof(p) &lt;&lt; endl; // 4字节 注意当数组作为函数的参数进行传递时，该数组自动退化为同类型的指针。如下示例中，不论数组a的容量是多少，sizeof(a)始终等于sizeof(char *)。123void Func(char a[100])&#123; cout&lt;&lt; sizeof(a) &lt;&lt; endl; // 4字节而不是100字节&#125; 指针参数是如何传递内存的 如果函数的参数是一个指针，不要指望用该指针去申请动态内存。如下示例中，Test函数的语句GetMemory(str, 200)并没有使str获得期望的内存，str依旧是NULL，为什么？12345678void GetMemory(char *p, int num)&#123; p = (char *)malloc(sizeof(char) * num);&#125;void Test(void)&#123; char *str = NULL; GetMemory(str, 100); // str 仍然为 NULL strcpy(str, "hello"); // 运行错误&#125; 毛病出在函数GetMemory中。编译器总是要为函数的每个参数制作临时副本，指针参数p的副本是 _p，编译器使 _p=p。如果函数体内的程序修改了_p的内容，就导致参数p的内容作相应的修改。这就是指针可以用作输出参数的原因。在本例中，_p申请了新的内存，只是把 _p所指的内存地址改变了，但是p丝毫未变。所以函数GetMemory并不能输出任何东西。事实上，每执行一次GetMemory就会泄露一块内存，因为没有用free释放内存。 如果非得要用指针参数去申请内存，那么应该改用“指向指针的指针”，见示例：1234567891011void GetMemory2(char **p, int num)&#123; *p = (char *)malloc(sizeof(char) * num);&#125;void Test2(void)&#123; char *str = NULL; GetMemory2(&amp;str, 100); // 注意参数是 &amp;str，而不是str strcpy(str, "hello"); cout&lt;&lt; str &lt;&lt; endl; free(str);&#125; 由于“指向指针的指针”这个概念不容易理解，我们可以用函数返回值来传递动态内存。这种方法更加简单，见示例：123456789101112char *GetMemory3(int num)&#123; char *p = (char *)malloc(sizeof(char) * num); return p;&#125;void Test3(void)&#123; char *str = NULL; str = GetMemory3(100); strcpy(str, "hello"); cout&lt;&lt; str &lt;&lt; endl; free(str);&#125; 用函数返回值来传递动态内存这种方法虽然好用，但是常常有人把return语句用错了。这里强调不要用return语句返回指向“栈内存”的指针，因为该内存在函数结束时自动消亡，见示例：123456789char *GetString(void)&#123; char p[] = "hello world"; return p; // 编译器将提出警告&#125;void Test4(void)&#123; char *str = NULL; str = GetString(); // str 的内容是垃圾 cout&lt;&lt; str &lt;&lt; endl;&#125; 用调试器逐步跟踪Test4，发现执行str = GetString语句后str不再是NULL指针，但是str的内容不是“hello world”而是垃圾。 如果把上述示例改写成如下示例，会怎么样？123456789char *GetString2(void)&#123; char *p = "hello world"; return p;&#125;void Test5(void)&#123; char *str = NULL; str = GetString2(); cout&lt;&lt; str &lt;&lt; endl;&#125; 函数Test5运行虽然不会出错，但是函数GetString2的设计概念却是错误的。因为GetString2内的“hello world”是常量字符串，位于静态存储区，它在程序生命期内恒定不变。无论什么时候调用GetString2，它返回的始终是同一个“只读”的内存块。 杜绝“野指针” “野指针”不是NULL指针，是指向“垃圾”内存的指针。人们一般不会错用NULL指针，因为用if语句很容易判断。但是“野指针”是很危险的，if语句对它不起作用。 “野指针”的成因主要有三种： 指针变量没有被初始化。任何指针变量刚被创建时不会自动成为NULL指针，它的缺省值是随机的，它会乱指一气。所以，指针变量在创建的同时应当被初始化，要么将指针设置为NULL，要么让它指向合法的内存。例如： 12char *p = NULL;char *str = (char *) malloc(100); 指针p被free或者delete之后，没有置为NULL，让人误以为p是个合法的指针。 指针操作超越了变量的作用域范围。 这种情况让人防不胜防，示例程序如下：12345678910class A&#123; public: void Func(void)&#123; cout &lt;&lt; “Func of class A” &lt;&lt; endl; &#125;&#125;;void Test(void)&#123; A *p; A a; p = &amp;a; // 注意 a 的生命期 p-&gt;Func(); // p是“野指针”&#125; 函数Test在执行语句p-&gt;Func()时，对象a已经消失，而p是指向a的，所以p就成了“野指针”。但奇怪的是我运行这个程序时居然没有出错，这可能与编译器有关。 有了malloc/free为什么还要new/delete malloc与free是C++/C语言的标准库函数，new/delete是C++的运算符。它们都可用于申请动态内存和释放内存。 对于非内部数据类型的对象而言，光用maloc/free无法满足动态对象的要求。对象在创建的同时要自动执行构造函数，对象在消亡之前要自动执行析构函数。由于malloc/free是库函数而不是运算符，不在编译器控制权限之内，不能够把执行构造函数和析构函数的任务强加于malloc/free。 因此C++语言需要一个能完成动态内存分配和初始化工作的运算符new，以及一个能完成清理与释放内存工作的运算符delete。注意new/delete不是库函数。我们先看一看malloc/free和new/delete如何实现对象的动态内存管理，见示例：12345678910111213141516171819class Obj&#123; public : Obj(void)&#123; cout &lt;&lt; “Initialization” &lt;&lt; endl; &#125; ~Obj(void)&#123; cout &lt;&lt; “Destroy” &lt;&lt; endl; &#125; void Initialize(void)&#123; cout &lt;&lt; “Initialization” &lt;&lt; endl; &#125; void Destroy(void)&#123; cout &lt;&lt; “Destroy” &lt;&lt; endl; &#125;&#125;;void UseMallocFree(void)&#123; Obj *a = (obj *)malloc(sizeof(obj)); // 申请动态内存 a-&gt;Initialize(); // 初始化 //… a-&gt;Destroy(); // 清除工作 free(a); // 释放内存&#125;void UseNewDelete(void)&#123; Obj *a = new Obj; // 申请动态内存并且初始化 //… delete a; // 清除并且释放内存&#125; 类Obj的函数Initialize模拟了构造函数的功能，函数Destroy模拟了析构函数的功能。函数UseMallocFree中，由于malloc/free不能执行构造函数与析构函数，必须调用成员函数Initialize和Destroy来完成初始化与清除工作。函数UseNewDelete则简单得多。 所以我们不要企图用malloc/free来完成动态对象的内存管理，应该用new/delete。由于内部数据类型的“对象”没有构造与析构的过程，对它们而言malloc/free和new/delete是等价的。 既然new/delete的功能完全覆盖了malloc/free，为什么C++不把malloc/free淘汰出局呢？这是因为C++程序经常要调用C函数，而C程序只能用malloc/free管理动态内存。 如果用free释放“new创建的动态对象”，那么该对象因无法执行析构函数而可能导致程序出错。如果用delete释放“malloc申请的动态内存”，结果也会导致程序出错，但是该程序的可读性很差。所以new/delete必须配对使用，malloc/free也一样。 内存耗尽怎么办 如果在申请动态内存时找不到足够大的内存块，malloc和new将返回NULL指针，宣告内存申请失败。通常有三种方式处理“内存耗尽”问题。 判断指针是否为NULL，如果是则马上用return语句终止本函数。 123456void Func(void)&#123; A *a = new A; if(a == NULL) return; …&#125; 判断指针是否为NULL，如果是则马上用exit(1)终止整个程序的运行。 12345678void Func(void)&#123; A *a = new A; if(a == NULL)&#123; cout &lt;&lt; “Memory Exhausted” &lt;&lt; endl; exit(1); &#125; …&#125; 为new和malloc设置异常处理函数。 Visual C++可以用_set_new_hander函数为new设置用户自己定义的异常处理函数，也可以让malloc享用与new相同的异常处理函数。详细内容请参考C++使用手册。 上述 1、2 方式使用最普遍。如果一个函数内有多处需要申请动态内存，那么方式 1 就显得力不从心（释放内存很麻烦），应该用方式 2 来处理。 很多人不忍心用exit(1)，问：“不编写出错处理程序，让操作系统自己解决行不行？” 不行。如果发生“内存耗尽”这样的事情，一般说来应用程序已经无药可救。如果不用exit(1) 把坏程序杀死，它可能会害死操作系统。道理如同：如果不把歹徒击毙，歹徒在老死之前会犯下更多的罪。 有一个很重要的现象要告诉大家。对于32位以上的应用程序而言，无论怎样使用malloc与new，几乎不可能导致“内存耗尽”。对于32位以上的应用程序，“内存耗尽”错误处理程序毫无用处。这下可把Unix和Windows程序员们乐坏了：反正错误处理程序不起作用，我就不写了，省了很多麻烦。 必须强调：不加错误处理将导致程序的质量很差，千万不可因小失大。 123456789void main(void)&#123; float *p = NULL; while(TRUE)&#123; p = new float[1000000]; cout &lt;&lt; “eat memory” &lt;&lt; endl; if(p==NULL) exit(1); &#125;&#125; malloc/free的使用要点 函数malloc的原型如下：1void * malloc(size_t size); 用malloc申请一块长度为length的整数类型的内存，程序如下：1int *p = (int *) malloc(sizeof(int) * length); 我们应当把注意力集中在两个要素上：“类型转换”和“sizeof”。 malloc返回值的类型是void *，所以在调用malloc时要显式地进行类型转换，将void *转换成所需要的指针类型。 malloc函数本身并不识别要申请的内存是什么类型，它只关心内存的总字节数。我们通常记不住int, float等数据类型的变量的确切字节数。例如int变量在16位系统下是2个字节，在32位下是4个字节；而float变量在16位系统下是4个字节，在32位下也是4个字节。最好用以下程序作一次测试：12345678cout &lt;&lt; sizeof(char) &lt;&lt; endl;cout &lt;&lt; sizeof(int) &lt;&lt; endl;cout &lt;&lt; sizeof(unsigned int) &lt;&lt; endl;cout &lt;&lt; sizeof(long) &lt;&lt; endl;cout &lt;&lt; sizeof(unsigned long) &lt;&lt; endl;cout &lt;&lt; sizeof(float) &lt;&lt; endl;cout &lt;&lt; sizeof(double) &lt;&lt; endl;cout &lt;&lt; sizeof(void *) &lt;&lt; endl; 在malloc的“()”中使用sizeof运算符是良好的风格，但要当心有时我们会昏了头，写出 p = malloc(sizeof(p))这样的程序来。 函数free的原型如下：1void free( void * memblock ); 为什么free函数不象malloc函数那样复杂呢？这是因为指针p的类型以及它所指的内存的容量事先都是知道的，语句free(p)能正确地释放内存。如果p是NULL指针，那么free对p无论操作多少次都不会出问题。如果p不是NULL指针，那么free对p连续操作两次就会导致程序运行错误。 new/delete的使用要点 运算符new使用起来要比函数malloc简单得多，例如：12int *p1 = (int *)malloc(sizeof(int) * length);int *p2 = new int[length]; 这是因为new内置了sizeof、类型转换和类型安全检查功能。对于非内部数据类型的对象而言，new在创建动态对象的同时完成了初始化工作。如果对象有多个构造函数，那么new的语句也可以有多种形式。例如：12345678910111213class Obj&#123; public : Obj(void); // 无参数的构造函数 Obj(int x); // 带一个参数的构造函数 …&#125;void Test(void)&#123; Obj *a = new Obj; Obj *b = new Obj(1); // 初值为1 … delete a; delete b;&#125; 如果用new创建对象数组，那么只能使用对象的无参数构造函数。例如：1Obj *objects = new Obj[100]; // 创建100个动态对象 不能写成：1Obj *objects = new Obj[100](1);// 创建100个动态对象的同时赋初值1 在用delete释放对象数组时，留意不要丢了符号‘[]’。例如：12delete []objects; // 正确的用法delete objects; // 错误的用法 后者有可能引起程序崩溃和内存泄漏。 Conclusion]]></content>
      <tags>
        <tag>c</tag>
        <tag>c++</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ARC(Automatic Reference Counting)简记]]></title>
    <url>%2F2018%2F04%2F13%2Farc-record%2F</url>
    <content type="text"><![CDATA[ARC概述 在Objective-C中采用Automatic Reference Counting(ARC)机制，让编译器(clang)和运行时库协助(objc4)来进行内存管理。 内存管理的思考方式 自己生成的对象，自己持有 非自己生成的对象，自己也能持有 不再需要自己持有的对象时释放 非自己持有的对象无法释放 对象操作与Objective-C方法的对应： 对象操作 Objective-C方法 生成并持有对象 alloc/new/copy/mutableCopy 等方法 持有对象 retain方法 释放对象 release方法 废弃对象 dealloc方法 “自己”：对象的使用环境 苹果采用散列表(引用计数表)来管理引用计数 123456789101112131415161718192021222324252627282930313233343536static struct &#123; CFLock_t lock; CFBasicHashRef table;// uint8_t padding[64 - sizeof(CFBasicHashRef) - sizeof(CFLock_t)];&#125; __NSRetainCounters[NUM_EXTERN_TABLES];CF_EXPORT uintptr_t __CFDoExternRefOperation(uintptr_t op, id obj) &#123; if (nil == obj) HALT; uintptr_t idx = EXTERN_TABLE_IDX(obj); uintptr_t disguised = DISGUISE(obj); CFLock_t *lock = &amp;__NSRetainCounters[idx].lock; CFBasicHashRef table = __NSRetainCounters[idx].table; // 取得对象对应的散列表 uintptr_t count; switch (op) &#123; case 300: // increment case 350: // increment, no event __CFLock(lock); CFBasicHashAddValue(table, disguised, disguised); __CFUnlock(lock); if (__CFOASafe &amp;&amp; op != 350) __CFRecordAllocationEvent(__kCFObjectRetainedEvent, obj, 0, 0, NULL); return (uintptr_t)obj; case 400: // decrement if (__CFOASafe) __CFRecordAllocationEvent(__kCFObjectReleasedEvent, obj, 0, 0, NULL); case 450: // decrement, no event __CFLock(lock); count = (uintptr_t)CFBasicHashRemoveValue(table, disguised); __CFUnlock(lock); return 0 == count; case 500: __CFLock(lock); count = (uintptr_t)CFBasicHashGetCountOfKey(table, disguised); __CFUnlock(lock); return count; &#125; return 0;&#125; CF-1153.18/CFRuntime.c CFBasicHashRef 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172CF_PRIVATE CFBasicHashRef CFBasicHashCreate(CFAllocatorRef allocator, CFOptionFlags flags, const CFBasicHashCallbacks *cb) &#123; size_t size = sizeof(struct __CFBasicHash) - sizeof(CFRuntimeBase); if (flags &amp; kCFBasicHashHasKeys) size += sizeof(CFBasicHashValue *); // keys if (flags &amp; kCFBasicHashHasCounts) size += sizeof(void *); // counts if (flags &amp; kCFBasicHashHasHashCache) size += sizeof(uintptr_t *); // hashes CFBasicHashRef ht = (CFBasicHashRef)_CFRuntimeCreateInstance(allocator, CFBasicHashGetTypeID(), size, NULL); if (NULL == ht) return NULL; ht-&gt;bits.finalized = 0; ht-&gt;bits.hash_style = (flags &gt;&gt; 13) &amp; 0x3; ht-&gt;bits.fast_grow = (flags &amp; kCFBasicHashAggressiveGrowth) ? 1 : 0; ht-&gt;bits.counts_width = 0; ht-&gt;bits.strong_values = (flags &amp; kCFBasicHashStrongValues) ? 1 : 0; ht-&gt;bits.strong_keys = (flags &amp; kCFBasicHashStrongKeys) ? 1 : 0; ht-&gt;bits.weak_values = (flags &amp; kCFBasicHashWeakValues) ? 1 : 0; ht-&gt;bits.weak_keys = (flags &amp; kCFBasicHashWeakKeys) ? 1 : 0; ht-&gt;bits.int_values = (flags &amp; kCFBasicHashIntegerValues) ? 1 : 0; ht-&gt;bits.int_keys = (flags &amp; kCFBasicHashIntegerKeys) ? 1 : 0; ht-&gt;bits.indirect_keys = (flags &amp; kCFBasicHashIndirectKeys) ? 1 : 0; ht-&gt;bits.num_buckets_idx = 0; ht-&gt;bits.used_buckets = 0; ht-&gt;bits.deleted = 0; ht-&gt;bits.mutations = 1; if (ht-&gt;bits.strong_values &amp;&amp; ht-&gt;bits.weak_values) HALT; if (ht-&gt;bits.strong_values &amp;&amp; ht-&gt;bits.int_values) HALT; if (ht-&gt;bits.strong_keys &amp;&amp; ht-&gt;bits.weak_keys) HALT; if (ht-&gt;bits.strong_keys &amp;&amp; ht-&gt;bits.int_keys) HALT; if (ht-&gt;bits.weak_values &amp;&amp; ht-&gt;bits.int_values) HALT; if (ht-&gt;bits.weak_keys &amp;&amp; ht-&gt;bits.int_keys) HALT; if (ht-&gt;bits.indirect_keys &amp;&amp; ht-&gt;bits.strong_keys) HALT; if (ht-&gt;bits.indirect_keys &amp;&amp; ht-&gt;bits.weak_keys) HALT; if (ht-&gt;bits.indirect_keys &amp;&amp; ht-&gt;bits.int_keys) HALT; uint64_t offset = 1; ht-&gt;bits.keys_offset = (flags &amp; kCFBasicHashHasKeys) ? offset++ : 0; ht-&gt;bits.counts_offset = (flags &amp; kCFBasicHashHasCounts) ? offset++ : 0; ht-&gt;bits.hashes_offset = (flags &amp; kCFBasicHashHasHashCache) ? offset++ : 0;#if DEPLOYMENT_TARGET_EMBEDDED || DEPLOYMENT_TARGET_EMBEDDED_MINI ht-&gt;bits.hashes_offset = 0; ht-&gt;bits.strong_values = 0; ht-&gt;bits.strong_keys = 0; ht-&gt;bits.weak_values = 0; ht-&gt;bits.weak_keys = 0;#endif ht-&gt;bits.__kret = CFBasicHashGetPtrIndex((void *)cb-&gt;retainKey); ht-&gt;bits.__vret = CFBasicHashGetPtrIndex((void *)cb-&gt;retainValue); ht-&gt;bits.__krel = CFBasicHashGetPtrIndex((void *)cb-&gt;releaseKey); ht-&gt;bits.__vrel = CFBasicHashGetPtrIndex((void *)cb-&gt;releaseValue); ht-&gt;bits.__kdes = CFBasicHashGetPtrIndex((void *)cb-&gt;copyKeyDescription); ht-&gt;bits.__vdes = CFBasicHashGetPtrIndex((void *)cb-&gt;copyValueDescription); ht-&gt;bits.__kequ = CFBasicHashGetPtrIndex((void *)cb-&gt;equateKeys); ht-&gt;bits.__vequ = CFBasicHashGetPtrIndex((void *)cb-&gt;equateValues); ht-&gt;bits.__khas = CFBasicHashGetPtrIndex((void *)cb-&gt;hashKey); ht-&gt;bits.__kget = CFBasicHashGetPtrIndex((void *)cb-&gt;getIndirectKey); for (CFIndex idx = 0; idx &lt; offset; idx++) &#123; ht-&gt;pointers[idx] = NULL; &#125;#if ENABLE_MEMORY_COUNTERS int64_t size_now = OSAtomicAdd64Barrier((int64_t) CFBasicHashGetSize(ht, true), &amp; __CFBasicHashTotalSize); while (__CFBasicHashPeakSize &lt; size_now &amp;&amp; !OSAtomicCompareAndSwap64Barrier(__CFBasicHashPeakSize, size_now, &amp; __CFBasicHashPeakSize)); int64_t count_now = OSAtomicAdd64Barrier(1, &amp; __CFBasicHashTotalCount); while (__CFBasicHashPeakCount &lt; count_now &amp;&amp; !OSAtomicCompareAndSwap64Barrier(__CFBasicHashPeakCount, count_now, &amp; __CFBasicHashPeakCount)); OSAtomicAdd32Barrier(1, &amp;__CFBasicHashSizes[ht-&gt;bits.num_buckets_idx]);#endif return ht;&#125; CF-1153.18/CFBasicHash.c 所有权修饰符 Objective-C 中为了处理对象，将类型定义为 id 类型或各种对象类型 id 类型用于隐藏类型的类名，相当于C语言中的 void *。 __strong： 表示对对象的“强引用”。持有强引用的变量，在超出其作用域时强引用失效，所以自动地释放自己持有的对象，对象的所有者不存在，因此废弃该对象。该修饰符是 id 类型和对象类型默认的所有权修饰符。 __weak： 表示对对象的“弱引用”。持有弱引用的变量，在超出其作用域时，对象即被释放。在持有某对象的弱引用时，若该对象被废弃，则此弱引用将自动失效且被赋值为 nil (空弱引用)。 __unsafe_unretained： 附有该修饰符的变量不属于编译器的内存管理对象。既不持有对象的强引用也不持有对象的弱引用，只是表示对象，若该对象被废弃，其为悬垂指针。 __autoreleasing： 属性声明的属性与所有权修饰符的对应关系 属性声明的属性 所有权修饰符 assign __unsafe_unretained copy __strong (赋值的是被复制的对象) retain __strong strong __strong weak __weak unsafe_unretained __unsafe_unretained 内存泄漏就是应当废弃的对象在超出其生存周期后继续存在。相互引用(循环引用)容易发生内存泄漏。 野指针是指向“垃圾”内存（不可用内存）的指针。不是NULL指针。 悬垂指针是指指向曾经存在的对象，但该对象已经不再存在了。 附有 __strong 和 __weak 修饰符的变量类似于C++中的智能指针 std::shared_ptr 和 std::weak_ptr。std::shared_ptr 可通过引用计数来持有C++ 类实例，std::weak_ptr 可避免循环引用。 autorelease 类似于C语言中的自动变量(局部变量)的特性。若某自动变量超出其作用域，改自动变量将被自动废弃。 autorelease 的具体用法： 生成并持有 NSAutoreleasePool 对象 调用已分配对象的 autorelease 实例方法 废弃 NSAutoreleasePool 对象1234567891011121314151617181920/* ARC无效 */NSAutoreleasePool *pool = [[NSAutoreleasePool alloc] init];// 等同于 objc_autoreleasePoolPush();id obj = [[NSObject alloc] init];[obj autorelease];// 等同于 objc_autorelease(obj);[pool drain];// 等同于 objc_autoreleasePoolPop(pool);/* ARC有效 */@autoreleasepool &#123; // 显式 id __autoreleasing obj = [[NSObject alloc] init];&#125;@autoreleasepool &#123; // 非显式 // 非自己生成并持有的对象 id __strong obj = [NSMutableArray array];&#125; ARC有效时，指定“@autoreleasepool 块”来代替“NSAutoreleasePool 类对象生成，持有以及废弃”。通过将对象赋值给附加了__autoreleasing 修饰符的变量来代替调用 autorelease 方法。对象赋值给附有 __autoreleasing 修饰符的变量等价于在ARC无效时调用对象的 autorelease 方法，即对象被注册到 autoreleasepool 。 非显式地使用 __autoreleasing 也可以。这是由于编译器会检查方法名是否以 alloc/new/copy/mutableCopy 开始，如果不是则自动将返回的对象注册到 autoreleasepool 。 1234+ (id)array &#123; id obj = [[NSMutableArray alloc] init]; return obj;&#125; 以上为取得非自己生成并持有的对象时被调用方法的源代码示例。因为没有显式指定所有权修饰符所以 id obj 同附有 __strong 修饰符的 id __strong obj 是完全一样的。由于 return 使得对象变量超出其作用域，所以该强引用对应的自己持有的对象会被自动释放，但该对象作为函数的返回值，编译器会自动将其注册到 autoreleasepool 中。 id 的指针(id *obj)或对象的指针(NSObject **obj)在没有显式指定时会被附加上 __autoreleasing 修饰符。使用附有 __autoreleasing 修饰符的变量作为对象取得参数，都会注册到 autoreleasepool ， 并取得非自己生成并持有的对象。 如下：123456789101112131415- (BOOL)performOperationWithError:(NSError * __autoreleasing *)error &#123; *error = [[NSError alloc] initWithDomain:@&quot;Domain&quot; code:0 userInfo:nil]; return NO;&#125;// 调用方法NSError __strong *error = nil;BOOL result = [obj performOperationWithError: &amp;error];编译器转化上述代码为下：NSError __strong *error = nil;NSError __autoreleasing *tmp = error;BOOL result = [obj performOperationWithError: &amp;tmp];error = tmp; 在显式地指定 __autoreleasing 修饰符时，必须注意对象变量要为自动变量(包括局部变量，函数，以及方法参数)。 在访问附有 __weak 修饰符的变量时，实际上必定要访问注册到 autoreleasepool 的对象。为什么？12345678id __strong obj0 = [[NSObject alloc] init];id __weak obj1 = obj0;NSLog(@&quot;class = %@&quot;, [obj1 class]);编译器转化上述代码为下：id __weak obj1 = obj0;id __autoreleasing tmp = obj1;NSLog(@&quot;class = %@&quot;, [tmp class]); 这是因为 __weak 修饰符只持有对象的弱引用，而在访问引用对象的过程中，该对象有可能被废弃。如果把要访问的对象注册到 autoreleasepool 中，那么在 @autoreleasepool 块结束之前都能确保该对象存在。 在Cocoa框架中，相当于主循环的 NSRunLoop 或者在其他程序可运行的地方，对 NSAutoreleasePool 对象进行生成，持有和废弃处理。 Cocoa框架中有很多类方法用于返回 autorelease 的对象。比如：12id array = [NSMutableArray arrayWithCapacity:1];id array2 = [[[NSMutableArray alloc] initWithCapacity:1] autorelease]; 无论ARC是否有效，调试用的非公开函数 __objc__autoreleasePoolPrint() 都可使用。利用这一函数可调试注册到 autoreleasepool 上的对象。 autorelease 的实现 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102class AutoreleasePoolPage &#123; id *add(id obj) &#123; id *ret = next; // faster than `return next-1` because of aliasing *next++ = obj; return ret; &#125; void releaseAll() &#123; releaseUntil(begin()); &#125; static inline id autorelease(id obj) &#123; assert(obj); assert(!obj-&gt;isTaggedPointer()); id *dest __unused = autoreleaseFast(obj); assert(!dest || dest == EMPTY_POOL_PLACEHOLDER || *dest == obj); return obj; &#125; static inline void *push() &#123; id *dest; if (DebugPoolAllocation) &#123; // Each autorelease pool starts on a new pool page. dest = autoreleaseNewPage(POOL_BOUNDARY); &#125; else &#123; dest = autoreleaseFast(POOL_BOUNDARY); &#125; assert(dest == EMPTY_POOL_PLACEHOLDER || *dest == POOL_BOUNDARY); return dest; &#125; static inline void pop(void *token) &#123; AutoreleasePoolPage *page; id *stop; if (token == (void*)EMPTY_POOL_PLACEHOLDER) &#123; // Popping the top-level placeholder pool. if (hotPage()) &#123; // Pool was used. Pop its contents normally. // Pool pages remain allocated for re-use as usual. pop(coldPage()-&gt;begin()); &#125; else &#123; // Pool was never used. Clear the placeholder. setHotPage(nil); &#125; return; &#125; page = pageForPointer(token); stop = (id *)token; if (*stop != POOL_BOUNDARY) &#123; if (stop == page-&gt;begin() &amp;&amp; !page-&gt;parent) &#123; // Start of coldest page may correctly not be POOL_BOUNDARY: // 1. top-level pool is popped, leaving the cold page in place // 2. an object is autoreleased with no pool &#125; else &#123; // Error. For bincompat purposes this is not // fatal in executables built with old SDKs. return badPop(token); &#125; &#125; if (PrintPoolHiwat) printHiwat(); page-&gt;releaseUntil(stop); // memory: delete empty children if (DebugPoolAllocation &amp;&amp; page-&gt;empty()) &#123; // special case: delete everything during page-per-pool debugging AutoreleasePoolPage *parent = page-&gt;parent; page-&gt;kill(); setHotPage(parent); &#125; else if (DebugMissingPools &amp;&amp; page-&gt;empty() &amp;&amp; !page-&gt;parent) &#123; // special case: delete everything for pop(top) // when debugging missing autorelease pools page-&gt;kill(); setHotPage(nil); &#125; else if (page-&gt;child) &#123; // hysteresis: keep one empty child if page is more than half full if (page-&gt;lessThanHalfFull()) &#123; page-&gt;child-&gt;kill(); &#125; else if (page-&gt;child-&gt;child) &#123; page-&gt;child-&gt;child-&gt;kill(); &#125; &#125; &#125; static void init() &#123; int r __unused = pthread_key_init_np(AutoreleasePoolPage::key, AutoreleasePoolPage::tls_dealloc); assert(r == 0); &#125;&#125; objc4-706/runtime/NSObject.mm ARC规则 不能使用 retain/release/retainCount/autorelease。在ARC下，内存管理是编译器的工作。 不能使用 NSAllocateObject/NSDeallocateObject 须遵守内存管理的方法命名规则。alloc/new/copy/mutableCopy，以这些名称开始的方法在返回对象时，必须返回给调用方所应当持有的对象。以 init 开始的方法必须是实例方法，并且必须要返回对象。返回的对象应为 id 类型或该方法声明类的对象类型，抑或是该类的超类或子类型。该返回对象不注册到 autoreleasepool 中。 基本上只是对 alloc 方法返回值的对象进行初始化处理并返回该对象。 不要显式调用 dealloc。 无论 ARC 是否有效，只要对象的所有者都不持有该对象，该对象就被废弃。对象被废弃时，不管 ARC 是否有效，都会调用对象的 dealloc 方法。 使用@autoreleasepool 块代替 NSAutoreleasePool 不能使用区域(NSZone) 对象型变量不能作为C语言结构体(struct/union)的成员。C语言的规范上没有方法来管理结构体成员的生存周期。要把对象型变量加入到结构体成员中时，可强制转换为 void *，或者时附加 __unsafe_unretained 。 附有该修饰符的变量不属于编译器的内存管理对象。 显式转换“ id ”和“ void * ”。 __bridge 转换 单纯的赋值转换。注意转换为 void * 的 __bridge 转换其安全性与赋值给 __unsafe_unretained 修饰符相近，甚至会更低。如果不注意赋值对象的所有者，就会因悬垂指针而导致程序崩溃。123id obj = [[NSObject alloc] init];void *p = (__bridge void *)obj;id o = (__bridge id)p; __bridge_retained 转换 可使要转换赋值的变量也持有所赋值的对象。12id obj = [[NSObject alloc] init];void *p = (__bridge_retained void *)obj; __bridge_transfer 转换 被转换的变量所持有的对象在该变量被赋值给转换目标变量后随之释放。1234id obj = [[NSObject alloc] init];void *p = (__bridge_retained void *)obj;id obj1 = (__bridge_transfer id)p; 以下函数可用于 Objective-C 对象与 Core Foundation 对象之间的相互变换，即 Toll-Free-Bridge 转化。由于这种转换不需要使用额外的CPU资源，因此也被称为“免费桥”。1234567CFTypeRef CFBridgingRetain(id _Nullable X) &#123; return (__bridge_retained CFTypeRef)X;&#125;id CFBridgingRelease(CFTypeRef _Nullable X) &#123; return (__bridge_transfer id)X;&#125; 使用方法：1234567NSMutableArray *obj = [[NSMutableArray alloc] initWithCapacity:1];CFMutableArrayRef cfobject = CFBridgingRetain(obj);CFShow(cfobject);CFRelease(cfobject);CFMutableArrayRef cfobject = CFArrayCreateMutable(kCFAllocatorDefault, 0, NULL);id obj = CFBridgingRelease(cfobject); ARC实现 __strong：表示对对象的“强引用”。引用计数为1。持有强引用的变量，在超出其作用域时强引用失效，所以自动地释放自己持有的对象，对象的所有者不存在，因此废弃该对象。该修饰符是 id 类型和对象类型默认的所有权修饰符。 123456id __strong obj = [[NSObject alloc] init];// 编译器的模拟代码：id obj = objc_msgSend(NSObject, @selector(alloc));objc_msgSend(obj, @selector(init));objc_release(obj); 使用 alloc/new/copy/mutableCopy 以外的方法 123456789101112131415+ (id)array &#123; return [[NSMutableArray alloc] init];&#125;// NSMutableArray 类的 array 类方法 通过编译器转换后的模拟代码：+ (id)array &#123; id obj = objc_msgSend(NSMutableArray, @selector(alloc)); objc_msgSend(obj, @selector(init)); return objc_autoreleaseReturnValue(obj);&#125;id __strong obj = [NSMutableArray array];// 编译器的模拟代码：id obj = objc_msgSend(NSMutableArray, @selector(array));objc_retainAutoreleasedReturnValue(obj)objc_release(obj); objc_autoreleaseReturnValue() 函数会检查使用该函数的方法或者函数调用方的执行命令列表，如果方法或者函数的调用方调用了方法或者函数后紧接着调用 objc_retainAutoreleasedReturnValue() 函数，那么就不将返回的对象注册到 autoreleasepool 中，而是直接传递到方法或者函数的调用方。而返回的对象则存储在 TLS 中， Thread Local Storage（TLS）线程局部存储，目的很简单，将一块内存作为某个线程专有的存储，以 key-value 的形式进行读写。在返回的对象身上调用 objc_autoreleaseReturnValue() 方法时， runtime 将这个返回的对象 obj 储存在 TLS 中，然后直接返回这个 obj （不调用autorelease）；同时，在外部接收这个返回的对象的方法 objc_retainAutoreleasedReturnValue() 里发现 TLS 中正好存了这个对象，那么直接返回这个 obj （不调用retain）。于是乎，调用方和被调方利用 TLS 做中转，很有默契的免去了对返回值的内存管理。这就是在ARC下，runtime 对 autorelease 返回值的优化策略。 Thread-local storage（线程局部存储）指向 hot page ，即最新添加的 autoreleased 对象所在的那个 page 。??? __weak： 表示对对象的“弱引用”。弱引用并不持有对象，不会改变赋值给附有 weak 修饰符的变量的引用计数。持有弱引用的变量，在超出其作用域时，对象即被释放。在持有某对象的弱引用时，若该对象被废弃，则此弱引用将自动失效且被赋值为 nil (空弱引用)。使用 weak 修饰符的变量，即是使用注册到 autoreleasepool 中的对象，该对象的引用计数会加1. 1234567891011121314151617181920id __strong obj = [[NSObject alloc] init];id __weak obj1 = obj;NSLog(@&quot;%@&quot;, obj1);// 编译器的模拟代码：id obj1;objc_initWeak(&amp;obj1, obj);id tmp = objc_loadWeakRetained(&amp;obj1);objc_autorelease(tmp);NSLog(@&quot;%@&quot;, tmp);objc_destroyWeak(&amp;obj1);id objc_initWeak(id *location, id newObj) &#123; return storeWeak(location, (objc_object*)newObj);&#125;void objc_destroyWeak(id *location) &#123; (void)storeWeak(location, nil);&#125; storeWeak() 函数把第二参数的赋值对象的地址作为键值key，将第一参数的附有 weak 修饰符的变量的地址作为键值 value 注册到 weak 表中。如果第二参数(key)为 nil， 则把变量的地址(value)从 weak 表中删除。 weak 表与引用计数表相同，作为散列表被实现。如果使用 weak 表，将废弃对象的地址作为键值key进行检索，就能高速地获取对应的附有 weak 修饰符的变量的地址。另外，由于一个对象可同时赋值给多个附有 weak 修饰符的变量中，所以对于一个键值key，可注册多个变量的地址。 objc_loadWeakRetained() 函数取出附有 weak 修饰符变量所引用的对象并 retain。objc_autorelease() 函数将对象注册到 autoreleasepool 中 。如果大量使用附有 weak修饰符的变量，注册到 autoreleasepool 中的对象也会大量的增加，因此在使用附有 weak修饰符的变量时，最好先暂时赋值给附有 strong 修饰符的变量后使用。 对象废弃执行的动作 objc_release 当引用计数为0执行dealloc _objc_rootDealloc object_dispose objc_destructInstance objc_clear_deallocating 对象被弃用时最后调用objc_clear_deallocating 函数执行的动作 从 weak 表中获取废弃对象的地址为键值key的记录 将包含在记录中的所有附有 __weak 修饰符变量的地址，赋值为 nil 从weak 表中删除该记录 从引用计数表中删除废弃对象的地址为键值的记录 如果大量使用附有 weak 修饰符的变量，则会消耗相应的CPU资源，良策是只在需要避免循环引用时使用 weak 修饰符。 __unsafe_unretained： 附有该修饰符的变量不属于编译器的内存管理对象。既不持有对象的强引用也不持有对象的弱引用，只是表示对象，若该对象被废弃，其为悬垂指针。 __autoreleasing： 将对象赋值给有 __autoreleasing 修饰符的变量，等同于 ARC 无效时调用对象 autorelease 方法，会将对象注册到 autoreleasepool 中，对象的引用计数加1。 12345678910111213141516171819@autoreleasepool &#123; id __autoreleasing obj = [[NSObject alloc] init];&#125;/* 编译器的模拟代码 */id pool = objc_autoreleasePoolPush();id obj = objc_msgSend(NSObject, @selector(alloc));objc_msgSend(obj, @selector(init));objc_autorelease(obj);objc_autoreleasePoolPop(pool);@autoreleasepool &#123; id __autoreleasing obj = [NSMutableArray array];&#125;// 编译器的模拟代码：id pool = objc_autoreleasePoolPush();id obj = objc_msgSend(NSMutableArray, @selector(array));objc_retainAutoreleasedReturnValue(obj);objc_autorelease(obj);objc_autoreleasePoolPop(pool);]]></content>
      <categories>
        <category>Objective-C</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[简记Hexo及NexT主题的安装使用]]></title>
    <url>%2F2018%2F04%2F10%2Fhexo-next-startup%2F</url>
    <content type="text"><![CDATA[官方文档：Hexo中文文档NexT中文文档NexT源码 在Mac系统下搞了个博客，简单的记述一下从无到有的过程。在官方文档里有详细的安装以及使用教程，不想看文档的话可以按照下面的步骤快速的搭建。 安装 Homebrew1$ ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)" 安装 Git1$ brew install git 安装 nvmnvm: Node Version Manager，安装 Node.js 的最佳方式是使用 nvm。1$ curl https://raw.github.com/creationix/nvm/master/install.sh | sh 安装完成后，重启终端nvm环境才生效。 安装 Node.js1$ nvm install stable 安装 Hexo1$ npm install -g hexo-cli hexo 简单的命令格式，比如：hexo g == hexo generatehexo d == hexo deployhexo s == hexo serverhexo n == hexo new 创建博客123456$ hexo init &lt;folder&gt;$ cd &lt;folder&gt;$ npm install$ hexo n "我的新博客"$ hexo g -d$ hexo s 浏览器输入：http://localhost:4000 就可以看到了 Hexo目录：_config.yml 博客的配置文件scaffolds 博客文章模板source 博客文章目录themes 存放主题文件 Tip: hexo deploy出错解决方法： 1$ npm install hexo-deployer-git --save 安装 NexT 主题1$ git clone https://github.com/iissnan/hexo-theme-next themes/next 配置主题打开站点配置文件_config.yml，找到theme字段，并将其值更改为next1theme: next 更改主题外观找到 …/themes/next/_config.yml 文件，更改 scheme 字段12345# Schemes# scheme: Musescheme: Mist# scheme: Pisces# scheme: Gemini 使主题生效：123$ hexo clean$ hexo g -d$ hexo s 到这里博客的本地搭建已经完成了，这只是开始。如果想要博客让别人也能看见，那就得申请域名把博客部署到服务器，然后别人通过域名访问就可以浏览你的博客啦。当然你可以把博客部署到GitHub或者Coding又或者别的服务器等，域名购买有DNSPod，万网，GoDaddy等等，有国内，国外自己考虑，之后还想要自己的博客有个性或者更好用那就选一个好看的主题DIY了。 至于写Markdown写作工具，各有所爱，我用的是Sublime Text，装上 Package Control，Markdown​Editing, Markdown Preview或者Omni​Markup​Previewer 等插件，就可以愉快的玩耍了。 以下列出的条目可供参考，或许能帮上你～ 部署本地文件到github及源代码托管参考：Hexo+GitHub Pages搭建的个人博客Mac搭建hexo博客 域名绑定参考 ：hexo边搭边记在github上搭建自己的主页和顶级域名的绑定 NexT主题定制参考：hexo框架基于next主题定制基于Hexo+Next主题的个人博客搭建定制优化hexo的next主题个性化教程:打造炫酷网站 Markdown 语法参考 ：Markdown 语法整理大集合2017]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[算法之排序]]></title>
    <url>%2F2018%2F04%2F09%2Falgorithm-sort%2F</url>
    <content type="text"><![CDATA[排序分为内部排序和外部排序，内部排序指待排序的记录在内存中，外部排序的记录数量很大，以至于内存放不下而放在外存中，排序过程需要访问外存。这里仅介绍内部排序，包括插入排序、交换排序、选择排序、归并排序、基数排序。 插入排序1，直接插入排序：就是检查第i个数字，如果在它的左边的数字比它大，进行交换，这个动作一直继续下去，直到这个数字的左边数字比它还要小，就可以停止了。插入排序法主要的回圈有两个变数：i和j，每一次执行这个回圈，就会将第i个数字放到左边恰当的位置去。 123456789101112131415// 直接插入 从小到大排序void insertSort(int a[], int n) &#123; for(int i = 1; i &lt; n; i++) &#123; int tmp = a[i]; int j = i - 1; while(tmp &lt; a[j]) &#123; a[j+1] = a[j]; j--; if(j == -1)&#123; break; &#125; &#125; a[j+1] = tmp; &#125;&#125; 12345678910void insertSort(int a[], int n) &#123; for(int i = 1; i &lt; n; i++) &#123; int tmp = a[i]; int j = i - 1; for (; j &gt;= 0 &amp;&amp; a[j] &gt; tmp; j--) &#123; a[j+1] = a[j]; &#125; a[j+1] = tmp; &#125;&#125; 2，折半插入排序（binary insertion sort）：当直接插入进行到某一趟时，对于a[i]来讲，前面i－1个记录已经按关键字有序。此时不用直接插入排序的方法，而改为折半查找，找出a[i]应插入的位置。 1234567891011121314151617181920// 折半插入 从小到大排序void binaryInsertSort(int a[], int n) &#123; for (int i = 1; i &lt; n; i++) &#123; int tmp = a[i]; int low = 0; int high = i - 1; while (low &lt;= high) &#123; int middle = (low + high) / 2; if (tmp &lt; a[middle]) &#123; high = middle - 1; &#125; else &#123; low = middle + 1; &#125; &#125; for (int j = i-1; j &gt;= low; j--) &#123; a[j+1] = a[j]; &#125; a[low] = tmp; &#125;&#125; 3，希尔排序：“缩小增量”的排序方法，初期选用增量较大间隔比较，然后增量缩小，最后为1，希尔排序对增量序列没有严格规定。 12345678910111213141516// 希尔排序 从小到大排序void shellSort(int a[], int n) &#123; int k = n / 2; while (k &gt; 0) &#123; for (int i = k; i &lt; n; i++) &#123; int tmp = a[i]; int j = i - k; while ((a[j] &gt; tmp) &amp;&amp; (j &gt;= 0)) &#123; a[j+k] = a[j]; j -= k; &#125; a[j+k] = tmp; &#125; k /= 2; &#125;&#125; 交换排序1，冒泡排序：面对一排数据，先从前往后两两比较，如果前一个数比后一个数大就交换两者的顺序，即第一个数和第二个数比，第二个数和第三个数比，……,倒数第二个数和最后一个数比，这样一轮下来以后最大的数就排到最后；接着把除去最大的数的该组数据进行同样的操作，直至这组数只剩下一个，排序结束。 123456789101112// 冒泡排序void bubbleSort(int a[] , int n) &#123; for(int i = 0; i &lt; n; i++) &#123; for(int j = 0; j &lt; n-i-1; j++) &#123; // 比较两个相邻的元素 if(a[j] &gt; a[j+1]) &#123; int t = a[j]; a[j] = a[j+1]; a[j+1] = t; &#125; &#125; &#125;&#125; 2，快速排序：选取一个基准元素(通常已需要排序的数组第一个数)，然后通过一趟排序将比基准数大的放在右边，比基准数小的放在左边，接着对划分好的两个数组再进行上述的排序。快速排序的每一轮处理其实就是将这一轮的基准数归位，直到所有的数都归位为止，排序就结束了。挖坑填数进行总结1)．i =L; j = R; 将基准数挖出形成第一个坑a[i]。2)．j–由后向前找比它小的数，找到后挖出此数填前一个坑a[i]中。3)．i++由前向后找比它大的数，找到后也挖出此数填到前一个坑a[j]中。4)．再重复执行2，3二步，直到i==j，将基准数填入a[i]中。 12345678910111213141516171819202122232425// 快速排序void qsort(int *a, int left, int right) &#123; if(left &gt;= right) &#123; // 如果左边索引大于或者等于右边的索引就代表已经整理完成一个组了 return ; &#125; int i = left; int j = right; int key = a[left]; while(i &lt; j) &#123; // 控制在当前组内寻找一遍 while(i &lt; j &amp;&amp; key &lt;= a[j]) &#123; j--; // 向前寻找 &#125; a[i] = a[j]; // 将比第一个小的移到低端 while(i &lt; j &amp;&amp; key &gt;= a[i]) &#123; i++; // 向后寻找 &#125; a[j] = a[i]; // 将比第一个大的移到高端 &#125; a[i] = key; // 当在当组内找完一遍以后就把中间数key回归 qsort(a, left, i - 1); qsort(a, i + 1, right);&#125; 选择排序1，简单选择排序：面对一排数，假设第一个数是最小的，将第一个数依次与后面的所有数据进行比较，如发现更小的就把该数的下标记录下来，再将这个数与后面的数比较，一轮下来以后如果发现最小的数的下标不是第一个，就与第一个数交换，这样就保证了第一个位置上的数是最小的；对除去第一个数的剩下的数做同样的操作，多轮循环之后，直到剩下最后一个数，排序结束。 12345678910111213141516// 简单选择排序void simpleChoiceSort(int a[], int n) &#123; for(int i = 0; i &lt; n; i++) &#123; int m = i; for(int j = i + 1; j &lt; n; j++) &#123; if(a[j] &lt; a[m]) &#123; // 如果第j个元素比第m个元素小，将j赋值给m m = j; &#125; &#125; if(i != m) &#123; // 交换m和i两个元素的位置 int t = a[i]; a[i] = a[m]; a[m] = t; &#125; &#125;&#125; 2，堆排序（heap sort）：堆有两个性质，一是堆中某个节点的值总是不大于或不小于其父节点的值，二是堆是一棵完全树。以从大到小排序为例，首先要把得到的数组构建为一个最小堆，这样父节点均是小于或者等于子结点，根节点就是最小值，然后让根节点与尾节点交换，这样一次之后，再把前n－1个元素构建出最小根堆，让根结点与第n－2个元素交换，依此类推，得到降序序列。时间复杂度：O(n log2n) 1234567891011121314151617181920212223242526272829303132333435363738394041// 堆排序 从大到小排序// 以i节点为根，调整为堆的算法，m是节点总数，i节点的子结点为i*2+1,i*2+2void heapMin(int a[100], int i, int m) &#123; // tmp保存根节点，j为左孩子编号 int j, tmp; tmp = a[i]; j = 2*i+1; while (j &gt; m) &#123; if (j+1 &lt; m &amp;&amp; a[j+1] &lt; a[j]) &#123; // 在左右孩子中找最小的 j++; &#125; if (a[j] &gt;= tmp) &#123; break; &#125; a[i] = a[j]; i = j; j = 2*i+1; &#125; a[i] = tmp;&#125;void heapSort(int a[100], int n)&#123; // n/2-1最后一个非叶子节点 // 下面这个操作是建立最小堆 for (int i = n/2-1; i &gt;= 0; i--) &#123; heapMin(r, i, n); &#125; // for语句为输出堆顶元素，调整堆操作 for (int j = n-1; j &gt;= 1; j--) &#123; // 堆顶与堆尾交换 int tmp = a[0]; a[0] = a[j]; a[j] = tmp; heapMin(r, 0, j); &#125; // 得到的就是降序序列 for (int i = 0; i &lt; n; i++) &#123; printf(" %d", a[i]); &#125;&#125; 归并排序（merge sort）1，两路归并排序（Merge Sort）：也就是我们常说的归并排序，也叫合并排序。归并操作即将两个顺序序列合并成一个顺序序列的方法。该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。最差时间复杂度：O(nlogn)平均时间复杂度：O(nlogn)最差空间复杂度：O(n)稳定性：稳定 归并操作的基本步骤如下：1.申请两个与已经排序序列相同大小的空间，并将两个序列拷贝其中；2.设定最初位置分别为两个已经拷贝排序序列的起始位置，比较两个序列元素的大小，依次选择相对小的元素放到原始序列；3.重复2直到某一拷贝序列全部放入原始序列，将另一个序列剩下的所有元素直接复制到原始序列尾。 设归并排序的当前区间是arr[low..high]，分治法的三个步骤是：1.分解：将当前区间一分为二，即求分裂点2.求解：递归地对两个子区间arr[low..mid]和arr[mid+1..high]进行归并排序；3.组合：将已排序的两个子区间arr[low..mid]和arr[mid+1..high]归并为一个有序的区间arr[low..high]。递归的终结条件：子区间长度为1（一个记录自然有序）。 1234567891011121314151617181920212223242526272829303132333435363738// 归并子算法// 将有序的arr[low...mid]和s[mid+1...high]归并为有序的tmp[low...high]void merge(int arr[], int tmp[], int low, int mid, int high) &#123; int i = low; int j = mid + 1; int k = low; while (i != mid + 1 &amp;&amp; j != high + 1) &#123; if (arr[i] &gt;= arr[j]) &#123; tmp[k++] = arr[j++]; &#125; else &#123; tmp[k++] = arr[i++]; &#125; &#125; while (i != mid + 1) &#123; tmp[k++] = arr[i++]; &#125; while (j != high + 1) &#123; tmp[k++] = arr[j++]; &#125; for (i = low; i &lt;= high; i++) &#123; arr[i] = tmp[i]; &#125;&#125;// 两路归并排序void mergeSort(int arr[], int tmp[], int low, int high) &#123; if (low &lt; high) &#123; int mid = (low + high) / 2; mergeSort(arr, tmp, low, mid); mergeSort(arr, tmp, mid + 1, high); merge(arr, tmp, low, mid, high); &#125;&#125; 基数排序（radix sort）又称“桶子法”（bucket sort）或bin sort，顾名思义，它是透过键值的部份资讯，将要排序的元素分配至某些“桶”中，藉以达到排序的作用，基数排序法是属于稳定性的排序，其时间复杂度为O (nlog(r)m)，其中r为所采取的基数，而m为堆数，在某些时候，基数排序法的效率高于其它的稳定性排序法。将所有待比较数值（正整数）统一为同样的数位长度，数位较短的数前面补零。然后，从最低位开始，依次进行一次排序。这样从最低位排序一直到最高位排序完成以后, 数列就变成一个有序序列。LSD的排序方式由键值的最右边开始，而MSD则相反，由键值的最左边开始。 最高位优先(Most Significant Digit first)法，简称MSD法：先按k1排序分组，同一组中记录，关键码k1相等，再对各组按k2排序分成子组，之后，对后面的关键码继续这样的排序分组，直到按最次位关键码kd对各子组排序后。再将各组连接起来，便得到一个有序序列。 最低位优先(Least Significant Digit first)法，简称LSD法：先从kd开始排序，再对kd-1进行排序，依次重复，直到对k1排序后便得到一个有序序列。 LSD的基数排序适用于位数小的数列，如果位数多的话，使用MSD的效率会比较好。]]></content>
      <categories>
        <category>Algorithm</category>
      </categories>
      <tags>
        <tag>c</tag>
        <tag>c++</tag>
      </tags>
  </entry>
</search>
